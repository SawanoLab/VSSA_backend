"""create tables

Revision ID: 302e41ccae23
Revises: 
Create Date: 2023-11-03 09:47:12.630463

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
import sqlalchemy_utils
import uuid

# revision identifiers, used by Alembic.
revision = '302e41ccae23'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('players',
                    sa.Column('created_at',
                              mysql.TIMESTAMP(),
                              server_default=sa.text('current_timestamp'),
                              nullable=False),
                    sa.Column('updated_at',
                              mysql.TIMESTAMP(),
                              server_default=sa.text('current_timestamp on update current_timestamp'),
                              nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('number', sa.Integer(), nullable=False),
                    sa.Column('player_code', sa.String(
                        length=128), nullable=False),
                    sa.Column('surname', sa.String(
                        length=128), nullable=False),
                    sa.Column('name', sa.String(length=128), nullable=False),
                    sa.Column('nickname', sa.String(
                        length=128), nullable=False),
                    sa.Column('position', sa.String(
                        length=128), nullable=False),
                    sa.PrimaryKeyConstraint('uuid', name=op.f('pk_players'))
                    )
    op.create_table('teams',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('team_abbreviation', sa.String(
                        length=128), nullable=False),
                    sa.Column('team_name', sa.String(
                        length=128), nullable=False),
                    sa.Column('director_name', sa.String(
                        length=128), nullable=False),
                    sa.PrimaryKeyConstraint('uuid', name=op.f('pk_teams'))
                    )
    op.create_table('users',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('username', sa.String(
                        length=128), nullable=False),
                    sa.PrimaryKeyConstraint('uuid', name=op.f('pk_users'))
                    )
    op.create_table('matches',
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('start_day', sa.DATETIME(), nullable=False),
                    sa.Column('created_at', sa.DATETIME(), nullable=False),
                    sa.Column('home_team_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('away_team_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('home_score', sa.Integer(), nullable=False),
                    sa.Column('away_score', sa.Integer(), nullable=False),
                    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.ForeignKeyConstraint(['away_team_id'], ['teams.uuid'], name=op.f(
                        'fk_matches_away_team_id_teams')),
                    sa.ForeignKeyConstraint(['home_team_id'], ['teams.uuid'], name=op.f(
                        'fk_matches_home_team_id_teams')),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.uuid'], name=op.f('fk_matches_user_id_users')),
                    sa.PrimaryKeyConstraint('uuid', name=op.f('pk_matches'))
                    )
    op.create_table('seasons',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('start_day', sa.DATETIME(), nullable=False),
                    sa.Column('end_day', sa.DATETIME(), nullable=False),
                    sa.Column('season_name', sa.String(
                        length=128), nullable=False),
                    sa.Column('game_format', sa.String(
                        length=128), nullable=False),
                    sa.Column('code', sa.String(length=128), nullable=False),
                    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.uuid'], name=op.f('fk_seasons_user_id_users')),
                    sa.PrimaryKeyConstraint('uuid', name=op.f('pk_seasons'))
                    )
    op.create_table('seasonsPlayers',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('season_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('player_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.ForeignKeyConstraint(['player_id'], ['players.uuid'], name=op.f(
                        'fk_seasonsPlayers_player_id_players')),
                    sa.ForeignKeyConstraint(['season_id'], ['seasons.uuid'], name=op.f(
                        'fk_seasonsPlayers_season_id_seasons')),
                    sa.PrimaryKeyConstraint(
                        'uuid', name=op.f('pk_seasonsPlayers'))
                    )
    op.create_table('teamsPlayers',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('team_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('player_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('season_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.ForeignKeyConstraint(['player_id'], ['players.uuid'], name=op.f(
                        'fk_teamsPlayers_player_id_players')),
                    sa.ForeignKeyConstraint(['season_id'], ['seasons.uuid'], name=op.f(
                        'fk_teamsPlayers_season_id_seasons')),
                    sa.ForeignKeyConstraint(['team_id'], ['teams.uuid'], name=op.f(
                        'fk_teamsPlayers_team_id_teams')),
                    sa.PrimaryKeyConstraint(
                        'uuid', name=op.f('pk_teamsPlayers'))
                    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('teamsPlayers')
    op.drop_table('seasonsPlayers')
    op.drop_table('seasons')
    op.drop_table('matches')
    op.drop_table('users')
    op.drop_table('teams')
    op.drop_table('players')
    # ### end Alembic commands ###
