"""create table

Revision ID: ca08d0e88eb3
Revises: 
Create Date: 2023-11-26 19:18:42.361923

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
import sqlalchemy_utils
import uuid

# revision identifiers, used by Alembic.
revision = 'ca08d0e88eb3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('match_scores',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('home_team_score', sa.Integer(), nullable=False),
                    sa.Column('away_team_score', sa.Integer(), nullable=False),
                    sa.PrimaryKeyConstraint(
                        'uuid', name=op.f('pk_match_scores'))
                    )
    op.create_table('users',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('username', sa.String(
                        length=128), nullable=False),
                    sa.PrimaryKeyConstraint('uuid', name=op.f('pk_users'))
                    )
    op.create_table('seasons',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('start_day', sa.DATETIME(), nullable=False),
                    sa.Column('end_day', sa.DATETIME(), nullable=False),
                    sa.Column('season_name', sa.String(
                        length=128), nullable=False),
                    sa.Column('game_format', sa.String(
                        length=128), nullable=False),
                    sa.Column('code', sa.String(length=128), nullable=False),
                    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.uuid'], name=op.f('fk_seasons_user_id_users')),
                    sa.PrimaryKeyConstraint('uuid', name=op.f('pk_seasons'))
                    )
    op.create_table('teams',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('name', sa.String(length=128), nullable=False),
                    sa.Column('code', sa.String(length=128), nullable=False),
                    sa.Column('director', sa.String(
                        length=128), nullable=True),
                    sa.Column('coach', sa.String(length=128), nullable=True),
                    sa.Column('trainer', sa.String(length=128), nullable=True),
                    sa.Column('doctor', sa.String(length=128), nullable=True),
                    sa.Column('season_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.ForeignKeyConstraint(['season_id'], ['seasons.uuid'], name=op.f(
                        'fk_teams_season_id_seasons')),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.uuid'], name=op.f('fk_teams_user_id_users')),
                    sa.PrimaryKeyConstraint('uuid', name=op.f('pk_teams'))
                    )
    op.create_table('matchs',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('home_team_id', sa.String(
                        length=225), nullable=False),
                    sa.Column('away_team_id', sa.String(
                        length=225), nullable=False),
                    sa.Column('season_id', sa.String(
                        length=225), nullable=False),
                    sa.Column('user_id', sa.String(
                        length=225), nullable=False),
                    sa.Column('matchscore_id', sa.String(
                        length=225), nullable=False),
                    sa.ForeignKeyConstraint(['away_team_id'], ['teams.uuid'], name=op.f(
                        'fk_matchs_away_team_id_teams')),
                    sa.ForeignKeyConstraint(['home_team_id'], ['teams.uuid'], name=op.f(
                        'fk_matchs_home_team_id_teams')),
                    sa.ForeignKeyConstraint(['matchscore_id'], ['match_scores.uuid'], name=op.f(
                        'fk_matchs_matchscore_id_match_scores')),
                    sa.ForeignKeyConstraint(['season_id'], ['seasons.uuid'], name=op.f(
                        'fk_matchs_season_id_seasons')),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.uuid'], name=op.f('fk_matchs_user_id_users')),
                    sa.PrimaryKeyConstraint('uuid', name=op.f('pk_matchs'))
                    )
    op.create_table('players',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('name', sa.String(length=128), nullable=False),
                    sa.Column('player_number', sa.Integer(), nullable=False),
                    sa.Column('code', sa.String(length=128), nullable=False),
                    sa.Column('postion', sa.String(
                        length=128), nullable=False),
                    sa.Column('weight', sa.Integer(), nullable=True),
                    sa.Column('height', sa.Integer(), nullable=True),
                    sa.Column('user_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('team_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('season_id', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.ForeignKeyConstraint(['season_id'], ['seasons.uuid'], name=op.f(
                        'fk_players_season_id_seasons')),
                    sa.ForeignKeyConstraint(
                        ['team_id'], ['teams.uuid'], name=op.f('fk_players_team_id_teams')),
                    sa.ForeignKeyConstraint(
                        ['user_id'], ['users.uuid'], name=op.f('fk_players_user_id_users')),
                    sa.PrimaryKeyConstraint('uuid', name=op.f('pk_players'))
                    )
    op.create_table('playerMatchInfo',
                    sa.Column('created_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', mysql.TIMESTAMP(), server_default=sa.text(
                        'current_timestamp on update current_timestamp'), nullable=False),
                    sa.Column('uuid', sqlalchemy_utils.types.uuid.UUIDType(
                        binary=False), default=uuid.uuid4, nullable=False),
                    sa.Column('player_id', sa.String(
                        length=225), nullable=False),
                    sa.Column('match_id', sa.String(
                        length=255), nullable=False),
                    sa.Column('on_court', sa.Boolean(), nullable=False),
                    sa.Column('zone_code', sa.String(
                        length=255), nullable=False),
                    sa.Column('libero', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['match_id'], ['matchs.uuid'], name=op.f(
                        'fk_playerMatchInfo_match_id_matchs')),
                    sa.ForeignKeyConstraint(['player_id'], ['players.uuid'], name=op.f(
                        'fk_playerMatchInfo_player_id_players')),
                    sa.PrimaryKeyConstraint(
                        'uuid', name=op.f('pk_playerMatchInfo'))
                    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('playerMatchInfo')
    op.drop_table('players')
    op.drop_table('matchs')
    op.drop_table('teams')
    op.drop_table('seasons')
    op.drop_table('users')
    op.drop_table('match_scores')
    # ### end Alembic commands ###
